package br.edu.facear.classes;

import java.util.ArrayList;
import java.util.List;

import br.edu.facear.util.Arquivo;

public class Pergunta {

	private int id;
	private int avaliacao;
	private String pergunta;
	private String correta;
	private String alternativas1;
	private String alternativas2;
	private String alternativas3;
	private String autor;
	private Categoria categoria;
	private Jogador jogador;
	
	public Pergunta() {

	}
	

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public int getAvaliacao() {
		return avaliacao;
	}

	public void setAvaliacao(int avaliacao) {
		this.avaliacao = avaliacao;
	}

	public String getPergunta() {
		return pergunta;
	}

	public void setPergunta(String pergunta) {
		this.pergunta = pergunta;
	}

	public String getAlternativas1() {
		return alternativas1;
	}

	public void setAlternativas1(String alternativas1) {
		this.alternativas1 = alternativas1;
	}

	public String getAlternativas2() {
		return alternativas2;
	}

	public void setAlternativas2(String alternativas2) {
		this.alternativas2 = alternativas2;
	}

	public String getAlternativas3() {
		return alternativas3;
	}

	public void setAlternativas3(String alternativas3) {
		this.alternativas3 = alternativas3;
	}

	public String getCorreta() {
		return correta;
	}

	public void setCorreta(String correta) {
		this.correta = correta;
	}

	public String getAutor() {
		return autor;

	}

	public void setAutor(String autor) {
		this.autor = autor;
	}

	public Categoria getCategoria() {
		return categoria;
	}

	public void setCategoria(Categoria vector) {
		this.categoria = vector;
	}

	public Jogador getJogador() {
		return jogador;
	}

	public void setJogador(Jogador jogador) {
		this.jogador = jogador;
	}


	public void AvaliarPerguntas() {

		System.out.println("Pergunta avaliada com sucesso!");

	}

	public String ValidarPergunta(String resposta) {

		String ret = null;
		List<Pergunta> listaObjectPer = this.Ler();
		for (Pergunta per : listaObjectPer) {
			if (per.correta.equals(resposta)) {
				ret = "OK";
				break;
			} else
				ret = "ERRO";
		}
		return ret;

	}

	public Pergunta buscarPerguntas(int ID) {
		Pergunta perguntaRetorno = null;
		List<Pergunta> listaObjectPerg = this.Ler();
		for (Pergunta per : listaObjectPerg) {
			if (per.getId() == ID)
				perguntaRetorno = per;
		}
		return perguntaRetorno;

	}
	
	public List<Pergunta> LerPerguntaAvaliada() {
		// lista para retirnar do método
		List<Pergunta> listaRetorno = new ArrayList<Pergunta>();

		// recuperar a lista de strings do txt
		Arquivo arq = new Arquivo();
		arq.setNome("PerguntasAvaliadas.txt");
		List<String> lista = arq.Ler();

		// percorrer a lista de strings
		for (String linha : lista) {
			// para cada linha
			String[] vetdados = linha.split(";");

			Pergunta pergunta = new Pergunta();
			int idJogador = Integer.parseInt(vetdados[0]);
			Jogador jogador = new Jogador();
			jogador.setId(idJogador);
			pergunta.setJogador(jogador.Ler(idJogador));

			int id = Integer.parseInt(vetdados[1]); // Id
			pergunta.setId(id);
			
			listaRetorno.add(pergunta);
		}

		return listaRetorno;

	}
	
	
	public List<Pergunta> Ler() {
		// lista para retirnar do método
		List<Pergunta> listaRetorno = new ArrayList<Pergunta>();

		// recuperar a lista de strings do txt
		Arquivo arq = new Arquivo();
		arq.setNome("Pergunta.txt");
		List<String> lista = arq.Ler();

		// percorrer a lista de strings
		for (String linha : lista) {
			// para cada linha
			String[] vetdados = linha.split(";");

			// -> adicionar em um objeto
			Pergunta pergunta = new Pergunta();
			int id = Integer.parseInt(vetdados[0]); // Id
			pergunta.setId(id);
			
			int idCat = Integer.parseInt(vetdados[1]);
			Categoria categoria = new Categoria();
			categoria.setId(idCat);	
			
			pergunta.setCategoria(categoria.Ler(idCat));
			
			pergunta.setPergunta(vetdados[2]);
			pergunta.setCorreta(vetdados[3]); // Nome
			pergunta.setAlternativas1(vetdados[4]);
			pergunta.setAlternativas2(vetdados[5]);
			pergunta.setAlternativas3(vetdados[6]);	
			int idJogador = Integer.parseInt(vetdados[7]);
			Jogador jogador = new Jogador();			
			jogador.setId(idJogador);
			pergunta.setJogador(jogador.Ler(idJogador));
			
//			pergunta.setAutor(vetdados[7]);
			
			int avaliacao = Integer.parseInt(vetdados[8]);
			pergunta.setAvaliacao(avaliacao);
			
			
			// -> adicionar na lista de retorno
			listaRetorno.add(pergunta);

		}
		return listaRetorno;

	}
	public String Cadastrar(boolean acrescentar) {
		String ret = null;
		
		
		if (acrescentar) {
			List<Pergunta> listaPergunta = Ler();
			this.setId(listaPergunta.size());

		}

		try {
			String linha = this.id + ";" + this.getCategoria().getId() + ";" + this.getPergunta() + ";" + this.getCorreta()+ ";"
					+ this.getAlternativas1() + ";" + this.getAlternativas2() + ";" + getAlternativas3() + ";" + this.getJogador().getId() + ";" + this.getAvaliacao();
			
			Arquivo arq = new Arquivo();
			arq.setNome("Pergunta.txt");
			arq.setAcrescentar(acrescentar);
			arq.setTexto(linha);
			arq.Gravar();
			
			ret = "OK";
			
		} catch (Exception e1) {
			ret = "ERRO";
		}

		return ret;

	}
	
	
	public void AvaliarPergunta() {
		List<Pergunta> lista = Ler();
		for (int i = 0; i < lista.size(); i++) {
			if (lista.get(i).getId() == this.getId()) {
				lista.get(i).setAvaliacao(lista.get(i).getAvaliacao() + 1);
				this.setJogador(Jogador.getInstance());
				this.setId(lista.get(i).getId());

				this.PerguntaAvaliada();
			}
		}
		new Pergunta().Salvar(lista);
	}

	public void Salvar(List<Pergunta> lista) {
		int cont = 0;
		for (Pergunta pergunta : lista) {
			if (cont == 0)
				pergunta.Cadastrar(false);
			else
				pergunta.Cadastrar(true);
			cont++;
		}
	}
	
	public List<Pergunta> carregarPergunta(){	
		List<Pergunta> retornoPeloId = new ArrayList<Pergunta>();
		List<Pergunta> lista = Ler();
		for (Pergunta pergunta : lista) {
			if(Jogador.getInstance().getId() == pergunta.getJogador().getId()){
				retornoPeloId.add(pergunta);
			}
		}	
		return retornoPeloId;
	}
	
	public void EditarPergunta(){
		List<Pergunta> listaPergunta = Ler();
		for (int i = 0; i < listaPergunta.size(); i++) {
			if (listaPergunta.get(i).getId() == this.getId()) {
				listaPergunta.get(i).setCategoria(this.getCategoria());
				listaPergunta.get(i).setPergunta(this.getPergunta());
				listaPergunta.get(i).setCorreta(this.getCorreta());
				listaPergunta.get(i).setAlternativas1(this.getAlternativas1());
				listaPergunta.get(i).setAlternativas2(this.getAlternativas2());
				listaPergunta.get(i).setAlternativas3(this.getAlternativas3());
			}
		}
		new Pergunta().Salvar(listaPergunta);		
	}
	
	public List<Pergunta> carregarPerguntaAvaliar(){	
		List<Pergunta> retornoPeloId = new ArrayList<Pergunta>();
		List<Pergunta> lista = Ler();
		List<Pergunta> listaPerguntaAvaliada = LerPerguntaAvaliada();
		for (Pergunta pergunta : lista) {
			for (Pergunta per : listaPerguntaAvaliada) {
				if(Jogador.getInstance().getId() != pergunta.getJogador().getId() && per.getId() != pergunta.getId()){
					retornoPeloId.add(pergunta);
				}
			}
		}	
		return retornoPeloId;
	}
	
	public String PerguntaAvaliada() {		
			
			String linha = this.getJogador().getId() + ";" + this.getId();
				
				Arquivo arq = new Arquivo();
				arq.setNome("PerguntasAvaliadas.txt");
				arq.setTexto(linha);
				arq.Gravar();
		
			
		return null;
	}
}
